package main

import "fmt"

func main() {
	a := [...]int{1, 3, 4, 3, 9, 3, 5, 6}
	n1 := len(a)
	// 第一种最基础的冒泡排序
	/*
		(1)第一次比较：首先比较第一和第二个数，将小数放在前面，将大数放在后面。
		(2)比较第2和第3个数，将小数 放在前面，大数放在后面。
		......
		(3)如此继续，知道比较到最后的两个数，将小数放在前面，大数放在后面，重复步骤，直至全部排序完成
		(4)在上面一趟比较完成后，最后一个数一定是数组中最大的一个数，所以在比较第二趟的时候，最后一个数是不参加比较的。
		(5)在第二趟比较完成后，倒数第二个数也一定是数组中倒数第二大数，所以在第三趟的比较中，最后两个数是不参与比较的。
		(6)依次类推，每一趟比较次数减少依次
	*/
	for i := 0; i < n1; i++ {
		for j := 0; j < n1-1-i; j++ {
			if a[j] > a[j+1] {
				// 常用的不用中间值的交换两数的小技巧	
				a[j] = a[j] ^ a[j+1]
				a[j+1] = a[j+1] ^ a[j]
				a[j] = a[j] ^ a[j+1]
			}
		}
	}
	fmt.Println(a)

	b := [...]int{2, 3, 4, 10, 33, 23, 50, 23}
	n2 := len(b)
	// 初始时swapped为true,否则排序过程无法启动
	swapped := true
	for i := 0; i < n2-1; i++ {
		// 如果没发生交换,说明剩余部分已经有序,排序完成
		if !swapped {
			break
		}
		// 设置swapped为false,如果发生交换,则将将器置为true
		swapped = false
		for j := 0; j < n2-1-i; j++ {
			if b[j] > b[j+1] {
				// 如果左边的数大于右边的数,则交换,保证右边的数字最大
				b[j], b[j+1] = b[j+1], b[j]
				// 表示发生了交换
				swapped = true
			}
		}
	}
	fmt.Println(b)

}
